from collections import Counter
from collections import defaultdict
def minMalwareSpread(graph, initial):

    colors={}
    N=len(graph)

    #dfs to check all the adjacent connected nodes, which are represented by 1, similar to friends circle
    def dfs(node, color):
        colors[node]=color

        for adj_node, connected in enumerate(graph[node]):
            if connected and adj_node not in colors:
                dfs(adj_node, color)

    #Assign a color to all cluster of nodes
    c=0
    for i in range(N):
        if i not in colors:
            dfs(i, c)
        c+=1
    
    #store the size of all colors
    size=Counter(colors.values())

    #Keep a not of unique colors in initial list of nodes
    unique_color=defaultdict(int)

    for j in initial:
        unique_color[colors[j]]+=1

    res=float('inf')
    for node in initial:
        c=colors[node]
        if unique_color[c]:
            if res==float('inf'):
                res=node
            elif size[c]>size[colors[res]]:
                res=node
            elif size[c]==size[colors[res]]:
                res=min(res, node)
    
    return res if res<float('inf') else min(initial)

graph = [[1,1,0],[1,1,0],[0,0,1]]
initial = [0,1,2]

print(minMalwareSpread(graph, initial))