from collections import Counter

def minMalwareSpread(graph, initial):
    pass
    N=len(graph[0])
    unaffected= set(range(N))-set(initial)

    def dfs(u, seen):
        
        for node, connected in enumerate(graph[u]):
            if node in unaffected and connected and node not in seen:
                seen.append(node)
                dfs(node, seen)

    infected_by={v:[] for v in unaffected}
    
    #visit all the infected nodes for the given initial node
    for u in initial:
        seen=[u]
        dfs(u, seen)

    #maintain a list of infectors for the infected nodes
        for v in seen:
            infected_by[v].append(u)

    uniq_conn=Counter()

    #maintain a count of unique connections for the infector nodes
    for v, neigh in infected_by.items():
        if len(neigh)==1:
            uniq_conn[neigh[0]]+=1
    
    best=(-1, min(initial))

    #return the node with the highest unique infected count score
    for u, score in uniq_conn.items():
        if (score>best[0]) or (score==best[0] and u<best[1]):
            best= score, u

    return best[1]

graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]]
initial = [0,1]

print(minMalwareSpread(graph, initial))